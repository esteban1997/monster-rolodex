{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GAAD,OAClB,sBAAKC,UAAY,iBAAjB,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,4BAAIN,EAAMI,QAAQG,aCHTC,EAAW,SAACR,GAAD,OACtB,qBAAKC,UAAW,YAAhB,SACGD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACrB,cAAC,EAAD,CAAyBA,QAASA,GAArBA,EAAQC,UCHlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAEf,uBACAZ,UAAY,SACZa,KAAM,SACNF,YAAeA,EACfG,SAAYF,MCmCPG,G,wDAvCb,aAAc,IAAD,8BACX,gBAeFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,gEASQ,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAQnC,IAAD,EAC2BC,KAAKN,MAA9Bb,EADF,EACEA,SAASU,EADX,EACWA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,YAAc,kBACzBC,aAAgBe,KAAKf,eACrB,cAAC,EAAD,CAAUJ,SAAYoB,W,GA/BdI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f6760204.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => (\r\n  <div className = 'card-container'>\r\n    <img alt='monster' src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n    <h2> {props.monster.name} </h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n)","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component.jsx';\r\n\r\nexport const CardList = (props) => (\r\n  <div className ='card-list'> \r\n    {props.monsters.map(monster => (\r\n          <Card key = {monster.id} monster={monster}></Card>\r\n          ))}\r\n  </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder ,handleChange}) => (\r\n  \r\n          <input \r\n          className = 'search'\r\n          type ='search' \r\n          placeholder = {placeholder}\r\n          onChange = {handleChange}\r\n           />\r\n);","import React, { Component }  from 'react';\r\nimport { CardList} from './components/card-list/card-list.component';\r\nimport {SearchBox} from './components/search-box/search-box.component';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({monsters: users})\r\n    );\r\n  }\r\n\r\n  handleChange = e =>{\r\n    this.setState({searchField: e.target.value})\r\n  }\r\n\r\n  render(){\r\n    const { monsters,searchField } = this.state;\r\n    const filteredMonster  = monsters.filter(monster => \r\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n      );\r\n      return (\r\n        <div className=\"App\">\r\n          <h1> Monsters Rolodex </h1>\r\n          <SearchBox placeholder = 'search monsters'\r\n          handleChange = {this.handleChange}/>\r\n          <CardList monsters = {filteredMonster} >\r\n          \r\n          </CardList>\r\n          \r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}